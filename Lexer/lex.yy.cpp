/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


 /* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include "unistd.h"

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

 /* Enter a start condition.  This macro really ought to take a parameter,
  * but we do it the disgusting crufty way forced on us by the ()-less
  * definition of BEGIN.
  */
#define BEGIN yy_start = 1 + 2 *

  /* Translate the current start state into a value that can be later handed
   * to BEGIN to return to the state.  The YYSTATE alias is for lex
   * compatibility.
   */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

   /* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state* YY_BUFFER_STATE;

extern int yyleng;
extern FILE* yyin, * yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

 /* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
{
	FILE* yy_input_file;

	char* yy_ch_buf;		/* input buffer */
	char* yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


 /* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char* yy_c_buf_p = (char*)0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO((FILE* input_file));

void yy_switch_to_buffer YY_PROTO((YY_BUFFER_STATE new_buffer));
void yy_load_buffer_state YY_PROTO((void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO((FILE* file, int size));
void yy_delete_buffer YY_PROTO((YY_BUFFER_STATE b));
void yy_init_buffer YY_PROTO((YY_BUFFER_STATE b, FILE* file));
void yy_flush_buffer YY_PROTO((YY_BUFFER_STATE b));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO((char* base, yy_size_t size));
YY_BUFFER_STATE yy_scan_string YY_PROTO((yyconst char* str));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO((yyconst char* bytes, int len));

static void* yy_flex_alloc YY_PROTO((yy_size_t));
static void* yy_flex_realloc YY_PROTO((void*, yy_size_t));
static void yy_flex_free YY_PROTO((void*));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE* yyin = (FILE*)0, * yyout = (FILE*)0;
typedef int yy_state_type;
extern char* yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO((void));
static yy_state_type yy_try_NUL_trans YY_PROTO((yy_state_type current_state));
static int yy_get_next_buffer YY_PROTO((void));
static void yy_fatal_error YY_PROTO((yyconst char msg[]));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 82
#define YY_END_OF_BUFFER 83
static yyconst short int yy_accept[199] =
{ 0,
	0,    0,    0,    0,    0,    0,   83,   82,   81,   80,
   82,   64,   44,   60,   32,   33,   42,   38,   35,   39,
   34,   43,   57,   57,   36,   37,   45,   51,   46,   82,
   27,   30,   31,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   28,   29,
   65,   66,   67,   82,   61,   62,   63,   81,   50,   56,
   54,   40,   52,   41,   53,   55,   57,    0,    0,    0,
   47,   49,   48,    0,   27,   27,   27,   11,   27,   27,
   27,   17,   27,   27,   18,   27,   12,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   65,   69,

   68,   71,   70,   72,   73,   74,   75,   76,   77,   78,
   61,   59,    0,   58,    0,    0,   79,   27,   27,   27,
   27,   27,   20,   24,   27,   10,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,    4,   25,
   27,   19,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,    5,   27,   23,   27,   27,    6,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   22,
   27,   27,   27,   27,   27,   27,   27,   13,    9,    8,
   26,   27,   27,   21,   27,   27,   27,   16,   27,    2,
	1,   14,   27,    3,   27,    7,   15,    0

};

static yyconst int yy_ec[256] =
{ 0,
	1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
	1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    2,    4,    5,    1,    1,    6,    1,    7,    8,
	9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
   18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
   22,   23,    1,   24,   25,   26,   25,   25,   25,   25,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   28,   27,   27,
   29,   30,   31,    1,   32,    1,   33,   34,   35,   36,

   37,   38,   39,   40,   41,   27,   27,   42,   43,   44,
   45,   46,   27,   47,   48,   49,   50,   51,   52,   53,
   27,   27,   54,    1,   55,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1
};

static yyconst int yy_meta[56] =
{ 0,
	1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
	1,    1,    1,    1,    1,    5,    5,    5,    1,    1,
	1,    1,    1,    1,    6,    6,    7,    7,    1,    2,
	1,    6,    6,    6,    6,    6,    6,    6,    7,    7,
	7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
	7,    7,    7,    1,    1
};

static yyconst short int yy_base[207] =
{ 0,
	0,    0,   53,   54,   57,   58,  268,  269,  265,  269,
  244,  269,  243,  269,  269,  269,  242,   51,  269,   50,
  269,  241,   63,   50,  269,  269,  240,  239,  238,  254,
	0,  269,  269,   37,  225,   34,  212,  214,  210,   48,
   57,  203,   28,  216,  203,  211,   57,  210,  269,  269,
	0,  269,  269,  112,    0,  269,  269,  247,  269,  269,
  269,  269,  269,  269,  269,  269,   83,   88,  216,   90,
  269,  269,  269,  242,    0,    0,  198,    0,  197,  211,
  210,    0,  194,  194,    0,  191,    0,  196,  186,  200,
   68,  202,  186,   77,  193,  186,  191,  190,    0,  269,

  269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
	0,   95,  109,  198,  197,  223,  269,  178,  189,  178,
  176,  186,  185,  184,  183,    0,  172,  167,  168,  174,
  165,  165,  172,  164,  162,  174,  167,  149,    0,    0,
  146,    0,  155,  140,  132,  132,  129,  123,  117,  110,
  114,  110,    0,  103,    0,  115,  118,    0,  114,  104,
  101,  103,   94,  105,  104,   94,  102,   97,  102,    0,
   99,   93,   99,   98,   94,   92,   74,    0,    0,    0,
	0,   79,   69,    0,   72,   68,   56,    0,   40,    0,
	0,    0,   33,    0,   33,    0,    0,  269,  163,  170,

  175,  178,  185,  192,  195,  201
};

static yyconst short int yy_def[207] =
{ 0,
  198,    1,  199,  199,  200,  200,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  201,
  202,  198,  198,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  198,  198,
  203,  198,  198,  198,  204,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  205,  198,
  198,  198,  198,  206,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  203,  198,

  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  204,  198,  198,  205,  205,  206,  198,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,    0,  198,  198,

  198,  198,  198,  198,  198,  198
};

static yyconst short int yy_nxt[325] =
{ 0,
	8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
   18,   19,   20,   21,   22,   23,   24,   24,   25,   26,
   27,   28,   29,   30,   31,   31,   31,   31,   32,    8,
   33,   31,   34,   35,   36,   37,   38,   39,   31,   31,
   40,   31,   31,   41,   42,   43,   44,   45,   46,   31,
   47,   48,   31,   49,   50,   52,   52,   53,   53,   56,
   56,   62,   64,   57,   57,   67,   67,   67,  197,  196,
   77,   65,   63,   80,   91,   81,  195,   92,   67,   67,
   67,   70,   54,   54,   78,   85,   54,   54,   68,   88,
   69,   86,  194,   89,   70,   87,   68,   96,   67,   67,

   67,   97,  193,  112,  112,   67,   67,   67,  128,  132,
  112,  112,  129,  192,   70,   69,  100,  191,  101,  113,
  190,   70,  189,  133,  112,  112,  113,  102,  188,  187,
  186,  185,  184,  183,  182,  181,  180,  179,  178,  177,
  113,  103,  176,  175,  104,  105,  174,  173,  172,  106,
  171,  170,  169,  168,  167,  107,  166,  165,  108,  164,
  109,  163,  110,   51,   51,   51,   51,   51,   51,   51,
   55,   55,   55,   55,   55,   55,   55,   75,  162,  161,
   75,   75,   76,   76,   76,   99,  160,  159,   99,   99,
   99,   99,  111,  158,  111,  157,  111,  111,  111,  114,

  114,  116,  116,  116,  116,  116,  116,  116,  156,  155,
  154,  153,  152,  151,  150,  149,  148,  147,  146,  145,
  144,  143,  142,  141,  140,  139,  138,  117,  115,  115,
  137,  136,  135,  134,  131,  130,  127,  126,  125,  124,
  123,  122,  121,  120,  119,  118,  117,  115,   58,   98,
   95,   94,   93,   90,   84,   83,   82,   79,   74,   73,
   72,   71,   66,   61,   60,   59,   58,  198,    7,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198
};

static yyconst short int yy_chk[325] =
{ 0,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	1,    1,    1,    1,    1,    3,    4,    3,    4,    5,
	6,   18,   20,    5,    6,   24,   24,   24,  195,  193,
   34,   20,   18,   36,   43,   36,  189,   43,   23,   23,
   23,   24,    3,    4,   34,   40,    5,    6,   23,   41,
   23,   40,  187,   41,   23,   40,   23,   47,   67,   67,

   67,   47,  186,   68,   68,   70,   70,   70,   91,   94,
  112,  112,   91,  185,   67,   23,   54,  183,   54,   68,
  182,   70,  177,   94,  113,  113,  112,   54,  176,  175,
  174,  173,  172,  171,  169,  168,  167,  166,  165,  164,
  113,   54,  163,  162,   54,   54,  161,  160,  159,   54,
  157,  156,  154,  152,  151,   54,  150,  149,   54,  148,
   54,  147,   54,  199,  199,  199,  199,  199,  199,  199,
  200,  200,  200,  200,  200,  200,  200,  201,  146,  145,
  201,  201,  202,  202,  202,  203,  144,  143,  203,  203,
  203,  203,  204,  141,  204,  138,  204,  204,  204,  205,

  205,  206,  206,  206,  206,  206,  206,  206,  137,  136,
  135,  134,  133,  132,  131,  130,  129,  128,  127,  125,
  124,  123,  122,  121,  120,  119,  118,  116,  115,  114,
   98,   97,   96,   95,   93,   92,   90,   89,   88,   86,
   84,   83,   81,   80,   79,   77,   74,   69,   58,   48,
   46,   45,   44,   42,   39,   38,   37,   35,   30,   29,
   28,   27,   22,   17,   13,   11,    9,    7,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198
};

static yy_state_type yy_last_accepting_state;
static char* yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char* yytext;
#line 1 "./.l"
#define INITIAL 0
#line 2 "./.l"
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>

using namespace std;
#define YY_NEVER_INTERACTIVE 1
#define STRING 1

#define CHAR 2

#line 23 "./.l"
void delete_underlines(char* str, char* newStr);
#line 519 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO((int c, char* buf_ptr));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char*, yyconst char*, int));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO((void));
#else
static int input YY_PROTO((void));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int* yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

 /* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

 /* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
  * is returned in "result".
  */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

  /* No semi-colon after return; correct usage is to write "yyterminate();" -
   * we don't want an extra ';' after the "return" because that will cause
   * some compilers to complain about unreachable statements.
   */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

   /* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

 /* Code executed at the beginning of each rule, after yytext and yyleng
  * have been set up.
  */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

  /* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
{
register yy_state_type yy_current_state;
register char* yy_cp,* yy_bp;
register int yy_act;

#line 26 "./.l"



int lineCounter = 0;
string literal = "";
char* buffer = 0;
char digit[1024] = "";


#line 676 "lex.yy.c"

	if (yy_init)
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if (!yy_start)
			yy_start = 1;	/* first start state */

		if (!yyin)
			yyin = stdin;

		if (!yyout)
			yyout = stdout;

		if (!yy_current_buffer)
			yy_current_buffer =
				yy_create_buffer(yyin, YY_BUF_SIZE);

		yy_load_buffer_state();
		}

	while (1)		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if (yy_accept[yy_current_state])
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
				{
				yy_current_state = (int)yy_def[yy_current_state];
				if (yy_current_state >= 199)
					yy_c = yy_meta[(unsigned int)yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
			++yy_cp;
			} while (yy_base[yy_current_state] != 269);

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if (yy_act == 0)
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch (yy_act)
	{ /* beginning of action switch */
			case 0: /* must back up */
				/* undo the effects of YY_DO_BEFORE_ACTION */
				*yy_cp = yy_hold_char;
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;

	case 1:
	YY_RULE_SETUP
	#line 35 "./.l"
	{ cout << "keyword: abstract" << endl; }
		YY_BREAK
	case 2:
	YY_RULE_SETUP
	#line 36 "./.l"
	{ cout << "keyword: virtual" << endl; }
		YY_BREAK
	case 3:
	YY_RULE_SETUP
	#line 37 "./.l"
	{ cout << "keyword: override" << endl; }
		YY_BREAK
	case 4:
	YY_RULE_SETUP
	#line 39 "./.l"
	{ cout << "keyword: base" << endl; }
		YY_BREAK
	case 5:
	YY_RULE_SETUP
	#line 40 "./.l"
	{ cout << "keyword: this" << endl; }
		YY_BREAK
	case 6:
	YY_RULE_SETUP
	#line 41 "./.l"
	{ cout << "keyword: class" << endl; }
		YY_BREAK
	case 7:
	YY_RULE_SETUP
	#line 42 "./.l"
	{ cout << "keyword: namespace" << endl; }
		YY_BREAK
	case 8:
	YY_RULE_SETUP
	#line 43 "./.l"
	{ cout << "keyword: static" << endl; }
		YY_BREAK
	case 9:
	YY_RULE_SETUP
	#line 44 "./.l"
	{ cout << "keyword: return" << endl; }
		YY_BREAK
	case 10:
	YY_RULE_SETUP
	#line 46 "./.l"
	{ cout << "keyword: new" << endl; }
		YY_BREAK
	case 11:
	YY_RULE_SETUP
	#line 47 "./.l"
	{ cout << "keyword: as" << endl; }
		YY_BREAK
	case 12:
	YY_RULE_SETUP
	#line 48 "./.l"
	{ cout << "keyword: is" << endl; }
		YY_BREAK
	case 13:
	YY_RULE_SETUP
	#line 50 "./.l"
	{ cout << "keyword: public" << endl; }
		YY_BREAK
	case 14:
	YY_RULE_SETUP
	#line 51 "./.l"
	{ cout << "keyword: internal" << endl; }
		YY_BREAK
	case 15:
	YY_RULE_SETUP
	#line 52 "./.l"
	{ cout << "keyword: protected" << endl; }
		YY_BREAK
	case 16:
	YY_RULE_SETUP
	#line 53 "./.l"
	{ cout << "keyword: private" << endl; }
		YY_BREAK
	case 17:
	YY_RULE_SETUP
	#line 55 "./.l"
	{ cout << "keyword: do" << endl; }
		YY_BREAK
	case 18:
	YY_RULE_SETUP
	#line 56 "./.l"
	{ cout << "keyword: if" << endl; }
		YY_BREAK
	case 19:
	YY_RULE_SETUP
	#line 57 "./.l"
	{ cout << "keyword: else" << endl; }
		YY_BREAK
	case 20:
	YY_RULE_SETUP
	#line 58 "./.l"
	{ cout << "keyword: for" << endl; }
		YY_BREAK
	case 21:
	YY_RULE_SETUP
	#line 59 "./.l"
	{ cout << "keyword: foreach" << endl; }
		YY_BREAK
	case 22:
	YY_RULE_SETUP
	#line 60 "./.l"
	{ cout << "keyword: while" << endl; }
		YY_BREAK
	case 23:
	YY_RULE_SETUP
	#line 62 "./.l"
	{ cout << "keyword: void" << endl; }
		YY_BREAK
	case 24:
	YY_RULE_SETUP
	#line 63 "./.l"
	{ cout << "keyword: int" << endl; }
		YY_BREAK
	case 25:
	YY_RULE_SETUP
	#line 64 "./.l"
	{ cout << "keyword: char" << endl; }
		YY_BREAK
	case 26:
	YY_RULE_SETUP
	#line 65 "./.l"
	{ cout << "keyword: string" << endl; }
		YY_BREAK
	case 27:
	YY_RULE_SETUP
	#line 68 "./.l"
	{
		buffer = yytext;
		if (buffer[0] == '@') { buffer++; }
		cout << "identifier: " << buffer << endl;
	}
		YY_BREAK
	case 28:
	YY_RULE_SETUP
	#line 75 "./.l"
	{ cout << "curly_bracket_open" << endl; }
		YY_BREAK
	case 29:
	YY_RULE_SETUP
	#line 76 "./.l"
	{ cout << "curly_bracket_close" << endl; }
		YY_BREAK
	case 30:
	YY_RULE_SETUP
	#line 77 "./.l"
	{ cout << "square_brackets_open" << endl; }
		YY_BREAK
	case 31:
	YY_RULE_SETUP
	#line 78 "./.l"
	{ cout << "square_brackets_close" << endl; }
		YY_BREAK
	case 32:
	YY_RULE_SETUP
	#line 79 "./.l"
	{ cout << "round_bracket_open" << endl; }
		YY_BREAK
	case 33:
	YY_RULE_SETUP
	#line 80 "./.l"
	{ cout << "round_bracket_close" << endl; }
		YY_BREAK
	case 34:
	YY_RULE_SETUP
	#line 82 "./.l"
	{ cout << "dot" << endl; }
		YY_BREAK
	case 35:
	YY_RULE_SETUP
	#line 83 "./.l"
	{ cout << "comma" << endl; }
		YY_BREAK
	case 36:
	YY_RULE_SETUP
	#line 84 "./.l"
	{ cout << "colon" << endl; }
		YY_BREAK
	case 37:
	YY_RULE_SETUP
	#line 85 "./.l"
	{ cout << "semicolon" << endl; }
		YY_BREAK
	case 38:
	YY_RULE_SETUP
	#line 87 "./.l"
	{ cout << "plus" << endl; }
		YY_BREAK
	case 39:
	YY_RULE_SETUP
	#line 88 "./.l"
	{ cout << "minus" << endl; }
		YY_BREAK
	case 40:
	YY_RULE_SETUP
	#line 89 "./.l"
	{ cout << "increment" << endl; }
		YY_BREAK
	case 41:
	YY_RULE_SETUP
	#line 90 "./.l"
	{ cout << "decrement" << endl; }
		YY_BREAK
	case 42:
	YY_RULE_SETUP
	#line 91 "./.l"
	{ cout << "asterisk" << endl; }
		YY_BREAK
	case 43:
	YY_RULE_SETUP
	#line 92 "./.l"
	{ cout << "slash" << endl; }
		YY_BREAK
	case 44:
	YY_RULE_SETUP
	#line 93 "./.l"
	{ cout << "percent" << endl; }
		YY_BREAK
	case 45:
	YY_RULE_SETUP
	#line 95 "./.l"
	{ cout << "less" << endl; }
		YY_BREAK
	case 46:
	YY_RULE_SETUP
	#line 96 "./.l"
	{ cout << "greater" << endl; }
		YY_BREAK
	case 47:
	YY_RULE_SETUP
	#line 97 "./.l"
	{ cout << "less_equal" << endl; }
		YY_BREAK
	case 48:
	YY_RULE_SETUP
	#line 98 "./.l"
	{ cout << "greater_equal" << endl; }
		YY_BREAK
	case 49:
	YY_RULE_SETUP
	#line 99 "./.l"
	{ cout << "equality" << endl; }
		YY_BREAK
	case 50:
	YY_RULE_SETUP
	#line 100 "./.l"
	{ cout << "inequality" << endl; }
		YY_BREAK
	case 51:
	YY_RULE_SETUP
	#line 102 "./.l"
	{ cout << "assignment" << endl; }
		YY_BREAK
	case 52:
	YY_RULE_SETUP
	#line 103 "./.l"
	{ cout << "assignment_increment" << endl; }
		YY_BREAK
	case 53:
	YY_RULE_SETUP
	#line 104 "./.l"
	{ cout << "assignment_decrement" << endl; }
		YY_BREAK
	case 54:
	YY_RULE_SETUP
	#line 105 "./.l"
	{ cout << "assignment_multiply" << endl; }
		YY_BREAK
	case 55:
	YY_RULE_SETUP
	#line 106 "./.l"
	{ cout << "assignment_division" << endl; }
		YY_BREAK
	case 56:
	YY_RULE_SETUP
	#line 107 "./.l"
	{ cout << "assignment_module" << endl; }
		YY_BREAK
	case 57:
	YY_RULE_SETUP
	#line 110 "./.l"
	{
		buffer = yytext;
		delete_underlines(buffer, digit);
		printf("integer_literal: %d\n", atoi(digit));
	}
		YY_BREAK
	case 58:
	YY_RULE_SETUP
	#line 116 "./.l"
	{
		buffer = yytext + 2;
		delete_underlines(buffer, digit);
		char* a;
		printf("hexadecimal_literal %d\n", strtol(digit, &a, 16));
	}
		YY_BREAK
	case 59:
	YY_RULE_SETUP
	#line 123 "./.l"
	{
		buffer = yytext + 2;
		delete_underlines(buffer, digit);
		char* a;
		printf("binary_literal %d\n", strtol(digit, &a, 2));
	}
		YY_BREAK
	case 60:
	YY_RULE_SETUP
	#line 130 "./.l"
	{ literal = ""; BEGIN(CHAR); }
		YY_BREAK
	case 61:
	YY_RULE_SETUP
	#line 131 "./.l"
	{ literal += yytext; }
		YY_BREAK
	case 62:
	YY_RULE_SETUP
	#line 132 "./.l"
	{ printf("ERROR line#%d: incorrect symbol in char literal\n", lineCounter + 1); }
		YY_BREAK
	case 63:
	YY_RULE_SETUP
	#line 133 "./.l"
	{
		if (literal.size() == 0)
			printf("ERROR line#%d: empty char literal\n", lineCounter + 1);
		else if (literal.size() == 1)
			printf("char_literal: %c\n", literal[0]);
		else
			printf("ERROR line#%d: too long char literal\n", lineCounter + 1);
		BEGIN(INITIAL);
	}
		YY_BREAK
	case YY_STATE_EOF(CHAR):
	#line 142 "./.l"
	{ printf("ERROR line#%d: no closed single quote\n", lineCounter + 1); BEGIN(INITIAL); }
		YY_BREAK
	case 64:
	YY_RULE_SETUP
	#line 144 "./.l"
	{ literal = ""; BEGIN(STRING); }
		YY_BREAK
	case 65:
	YY_RULE_SETUP
	#line 145 "./.l"
	{ literal += yytext; }
		YY_BREAK
	case 66:
	YY_RULE_SETUP
	#line 146 "./.l"
	{ printf("ERROR line#%d: incorrect symbol in string literal\n", lineCounter + 1); }
		YY_BREAK
	case 67:
	YY_RULE_SETUP
	#line 147 "./.l"
	{ cout << "string_literal: " + literal << endl; BEGIN(INITIAL); }
		YY_BREAK
	case YY_STATE_EOF(STRING):
	#line 148 "./.l"
	{ printf("ERROR line#%d: no closed double quote\n", lineCounter + 1); BEGIN(INITIAL); }
		YY_BREAK
	case 68:
	YY_RULE_SETUP
	#line 150 "./.l"
	{ literal.push_back('\''); }
		YY_BREAK
	case 69:
	YY_RULE_SETUP
	#line 151 "./.l"
	{ literal.push_back('\"'); }
		YY_BREAK
	case 70:
	YY_RULE_SETUP
	#line 152 "./.l"
	{ literal.push_back('\\'); }
		YY_BREAK
	case 71:
	YY_RULE_SETUP
	#line 153 "./.l"
	{ literal.push_back('\0'); }
		YY_BREAK
	case 72:
	YY_RULE_SETUP
	#line 154 "./.l"
	{ literal.push_back('\a'); }
		YY_BREAK
	case 73:
	YY_RULE_SETUP
	#line 155 "./.l"
	{ literal.push_back('\b'); }
		YY_BREAK
	case 74:
	YY_RULE_SETUP
	#line 156 "./.l"
	{ literal.push_back('\f'); }
		YY_BREAK
	case 75:
	YY_RULE_SETUP
	#line 157 "./.l"
	{ literal.push_back('\n'); }
		YY_BREAK
	case 76:
	YY_RULE_SETUP
	#line 158 "./.l"
	{ literal.push_back('\r'); }
		YY_BREAK
	case 77:
	YY_RULE_SETUP
	#line 159 "./.l"
	{ literal.push_back('\t'); }
		YY_BREAK
	case 78:
	YY_RULE_SETUP
	#line 160 "./.l"
	{ literal.push_back('\v'); }
		YY_BREAK
	case 79:
	YY_RULE_SETUP
	#line 162 "./.l"
	{
		buffer = yytext + 2;
		buffer[strlen(buffer) - 1] = '\0';
		printf("string_literal: %s\n", buffer);
	}
		YY_BREAK
	case 80:
	YY_RULE_SETUP
	#line 169 "./.l"
	{ lineCounter++; }
		YY_BREAK
	case 81:
	YY_RULE_SETUP
	#line 171 "./.l"
	{ /* eat up whitespace */ }
		YY_BREAK
	case 82:
	YY_RULE_SETUP
	#line 173 "./.l"
	ECHO;
		YY_BREAK
	#line 1207 "lex.yy.c"
	case YY_STATE_EOF(INITIAL):
		yyterminate();

		case YY_END_OF_BUFFER:
			{
			/* Amount of text matched not including the EOB char. */
			int yy_amount_of_matched_text = (int)(yy_cp - yytext_ptr) - 1;

			/* Undo the effects of YY_DO_BEFORE_ACTION. */
			*yy_cp = yy_hold_char;

			if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
				{
				/* We're scanning a new file or input source.  It's
				 * possible that this happened because the user
				 * just pointed yyin at a new source and called
				 * yylex().  If so, then we have to assure
				 * consistency between yy_current_buffer and our
				 * globals.  Here is the right place to do so, because
				 * this is the first action (other than possibly a
				 * back-up) that will match for the new input source.
				 */
				yy_n_chars = yy_current_buffer->yy_n_chars;
				yy_current_buffer->yy_input_file = yyin;
				yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
				}

			/* Note that here we test for yy_c_buf_p "<=" to the position
			 * of the first EOB in the buffer, since yy_c_buf_p will
			 * already have been incremented past the NUL character
			 * (since all states make transitions on EOB to the
			 * end-of-buffer state).  Contrast this with the test
			 * in input().
			 */
			if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
				{ /* This was really a NUL. */
				yy_state_type yy_next_state;

				yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				/* Okay, we're now positioned to make the NUL
				 * transition.  We couldn't have
				 * yy_get_previous_state() go ahead and do it
				 * for us because it doesn't know how to deal
				 * with the possibility of jamming (and we don't
				 * want to build jamming into it because then it
				 * will run more slowly).
				 */

				yy_next_state = yy_try_NUL_trans(yy_current_state);

				yy_bp = yytext_ptr + YY_MORE_ADJ;

				if (yy_next_state)
					{
					/* Consume the NUL. */
					yy_cp = ++yy_c_buf_p;
					yy_current_state = yy_next_state;
					goto yy_match;
					}

				else
					{
					yy_cp = yy_c_buf_p;
					goto yy_find_action;
					}
				}

			else switch (yy_get_next_buffer())
				{
				case EOB_ACT_END_OF_FILE:
					{
					yy_did_buffer_switch_on_eof = 0;

					if (yywrap())
						{
						/* Note: because we've taken care in
						 * yy_get_next_buffer() to have set up
						 * yytext, we can now set up
						 * yy_c_buf_p so that if some total
						 * hoser (like flex itself) wants to
						 * call the scanner after we return the
						 * YY_NULL, it'll still work - another
						 * YY_NULL will get returned.
						 */
						yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

						yy_act = YY_STATE_EOF(YY_START);
						goto do_action;
						}

					else
						{
						if (!yy_did_buffer_switch_on_eof)
							YY_NEW_FILE;
						}
					break;
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p =
						yytext_ptr + yy_amount_of_matched_text;

					yy_current_state = yy_get_previous_state();

					yy_cp = yy_c_buf_p;
					yy_bp = yytext_ptr + YY_MORE_ADJ;
					goto yy_match;

				case EOB_ACT_LAST_MATCH:
					yy_c_buf_p =
					&yy_current_buffer->yy_ch_buf[yy_n_chars];

					yy_current_state = yy_get_previous_state();

					yy_cp = yy_c_buf_p;
					yy_bp = yytext_ptr + YY_MORE_ADJ;
					goto yy_find_action;
				}
			break;
			}

		default:
			YY_FATAL_ERROR(
				"fatal flex scanner internal error--no action found");
		} /* end of action switch */
			} /* end of scanning one token */
} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

	static int yy_get_next_buffer()
{
	register char* dest = yy_current_buffer->yy_ch_buf;
	register char* source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--end of buffer missed");

	if (yy_current_buffer->yy_fill_buffer == 0)
	{ /* Don't try to fill the buffer, so this is an EOF. */
		if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
		{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else
		{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int)(yy_c_buf_p - yytext_ptr) - 1;

	for (i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
	{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)
		{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
				"input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int)(yy_c_buf_p - b->yy_ch_buf);

			if (b->yy_is_our_buffer)
			{
				int new_size = b->yy_buf_size * 2;

				if (new_size <= 0)
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char*)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc((void*)b->yy_ch_buf,
						b->yy_buf_size + 2);
			}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
					"fatal error - scanner input buffer overflow");

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
				number_to_move - 1;
#endif
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read);
	}

	if (yy_n_chars == 0)
	{
		if (number_to_move == YY_MORE_ADJ)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char* yy_cp;

	yy_current_state = yy_start;

	for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
	{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if (yy_accept[yy_current_state])
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
		while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
			yy_current_state = (int)yy_def[yy_current_state];
			if (yy_current_state >= 199)
				yy_c = yy_meta[(unsigned int)yy_c];
		}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
#else
static yy_state_type yy_try_NUL_trans(yy_current_state)
yy_state_type yy_current_state;
#endif
{
	register int yy_is_jam;
	register char* yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if (yy_accept[yy_current_state])
	{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
	}
	while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
	{
		yy_current_state = (int)yy_def[yy_current_state];
		if (yy_current_state >= 199)
			yy_c = yy_meta[(unsigned int)yy_c];
	}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	yy_is_jam = (yy_current_state == 198);

	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput(int c, register char* yy_bp)
#else
static void yyunput(c, yy_bp)
int c;
register char* yy_bp;
#endif
{
	register char* yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
	{ /* need to shift things up to make room */
	/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char* dest = &yy_current_buffer->yy_ch_buf[
			yy_current_buffer->yy_buf_size + 2];
		register char* source =
			&yy_current_buffer->yy_ch_buf[number_to_move];

		while (source > yy_current_buffer->yy_ch_buf)
			*--dest = *--source;

		yy_cp += (int)(dest - source);
		yy_bp += (int)(dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
			YY_FATAL_ERROR("flex scanner push-back overflow");
	}

	*--yy_cp = (char)c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
	{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
		{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch (yy_get_next_buffer())
			{
			case EOB_ACT_END_OF_FILE:
			{
				if (yywrap())
				{
					yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
					return EOF;
				}

				if (!yy_did_buffer_switch_on_eof)
					YY_NEW_FILE;
#ifdef __cplusplus
				return yyinput();
#else
				return input();
#endif
			}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
				break;

			case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
				YY_FATAL_ERROR(
					"unexpected last match in yyinput()");
#else
				YY_FATAL_ERROR(
					"unexpected last match in input()");
#endif
			}
		}
	}

	c = *(unsigned char*)yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
}


#ifdef YY_USE_PROTOS
void yyrestart(FILE* input_file)
#else
void yyrestart(input_file)
FILE* input_file;
#endif
{
	if (!yy_current_buffer)
		yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

	yy_init_buffer(yy_current_buffer, input_file);
	yy_load_buffer_state();
}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
#else
void yy_switch_to_buffer(new_buffer)
YY_BUFFER_STATE new_buffer;
#endif
{
	if (yy_current_buffer == new_buffer)
		return;

	if (yy_current_buffer)
	{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state(void)
#else
void yy_load_buffer_state()
#endif
{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size)
#else
YY_BUFFER_STATE yy_create_buffer(file, size)
FILE* file;
int size;
#endif
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char*)yy_flex_alloc(b->yy_buf_size + 2);
	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b, file);

	return b;
}


#ifdef YY_USE_PROTOS
void yy_delete_buffer(YY_BUFFER_STATE b)
#else
void yy_delete_buffer(b)
YY_BUFFER_STATE b;
#endif
{
	if (!b)
		return;

	if (b == yy_current_buffer)
		yy_current_buffer = (YY_BUFFER_STATE)0;

	if (b->yy_is_our_buffer)
		yy_flex_free((void*)b->yy_ch_buf);

	yy_flex_free((void*)b);
}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO((int));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer(YY_BUFFER_STATE b, FILE* file)
#else
void yy_init_buffer(b, file)
YY_BUFFER_STATE b;
FILE* file;
#endif


{
	yy_flush_buffer(b);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;
#endif
#endif
}


#ifdef YY_USE_PROTOS
void yy_flush_buffer(YY_BUFFER_STATE b)
#else
void yy_flush_buffer(b)
YY_BUFFER_STATE b;
#endif

{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if (b == yy_current_buffer)
		yy_load_buffer_state();
}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size)
#else
YY_BUFFER_STATE yy_scan_buffer(base, size)
char* base;
yy_size_t size;
#endif
{
	YY_BUFFER_STATE b;

	if (size < 2 ||
		base[size - 2] != YY_END_OF_BUFFER_CHAR ||
		base[size - 1] != YY_END_OF_BUFFER_CHAR)
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b);

	return b;
}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string(yyconst char* str)
#else
YY_BUFFER_STATE yy_scan_string(str)
yyconst char* str;
#endif
{
	int len;
	for (len = 0; str[len]; ++len)
		;

	return yy_scan_bytes(str, len);
}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes(yyconst char* bytes, int len)
#else
YY_BUFFER_STATE yy_scan_bytes(bytes, len)
yyconst char* bytes;
int len;
#endif
{
	YY_BUFFER_STATE b;
	char* buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char*)yy_flex_alloc(n);
	if (!buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

	for (i = 0; i < len; ++i)
		buf[i] = bytes[i];

	buf[len] = buf[len + 1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf, n);
	if (!b)
		YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state(int new_state)
#else
static void yy_push_state(new_state)
int new_state;
#endif
{
	if (yy_start_stack_ptr >= yy_start_stack_depth)
	{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof(int);

		if (!yy_start_stack)
			yy_start_stack = (int*)yy_flex_alloc(new_size);

		else
			yy_start_stack = (int*)yy_flex_realloc(
				(void*)yy_start_stack, new_size);

		if (!yy_start_stack)
			YY_FATAL_ERROR(
				"out of memory expanding start-condition stack");
	}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
{
	if (--yy_start_stack_ptr < 0)
		YY_FATAL_ERROR("start-condition stack underflow");

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
{
	return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error(yyconst char msg[])
#else
static void yy_fatal_error(msg)
char msg[];
#endif
{
	(void)fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char* s1, yyconst char* s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char* s1;
yyconst char* s2;
int n;
#endif
{
	register int i;
	for (i = 0; i < n; ++i)
		s1[i] = s2[i];
}
#endif


#ifdef YY_USE_PROTOS
static void* yy_flex_alloc(yy_size_t size)
#else
static void* yy_flex_alloc(size)
yy_size_t size;
#endif
{
	return (void*)malloc(size);
}

#ifdef YY_USE_PROTOS
static void* yy_flex_realloc(void* ptr, yy_size_t size)
#else
static void* yy_flex_realloc(ptr, size)
void* ptr;
yy_size_t size;
#endif
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void*)realloc((char*)ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void* ptr)
#else
static void yy_flex_free(ptr)
void* ptr;
#endif
{
	free(ptr);
}

#if YY_MAIN
int main()
{
	yylex();
	return 0;
}
#endif
#line 173 "./.l"


void delete_underlines(char* str, char* newStr)
{
	newStr[0] = 0;
	int j = 0;
	for (int i = 0; str[i] != '\0'; i++) {
		if (str[i] != '_') {
			newStr[j] = str[i]; j++;
		}
	}
	newStr[j] = '\0';
}

void main(int argc, char** argv)
{
	++argv, --argc;
	if (argc > 0)
		yyin = fopen(argv[0], "r");
	else
		yyin = stdin;

	yylex();
}