
/*  A Bison parser, made from ./.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	ABSTRACT	258
#define	VIRTUAL	259
#define	OVERRIDE	260
#define	BASE	261
#define	THIS	262
#define	CLASS	263
#define	NAMESPACE	264
#define	STATIC	265
#define	RETURN	266
#define	PUBLIC	267
#define	INTERNAL	268
#define	PROTECTED	269
#define	PRIVATE	270
#define	DO	271
#define	IF	272
#define	FOR	273
#define	FOREACH	274
#define	IN	275
#define	WHILE	276
#define	VOID	277
#define	INT	278
#define	CHAR	279
#define	STRING	280
#define	BOOL	281
#define	INT_LITERAL	282
#define	CHAR_LITERAL	283
#define	STRING_LITERAL	284
#define	BOOLEAN_LITERAL	285
#define	ID	286
#define	OR	287
#define	AND	288
#define	EQUALITY	289
#define	INEQUALITY	290
#define	LESS_EQUAL	291
#define	GREATER_EQUAL	292
#define	IS	293
#define	AS	294
#define	UNMINUS	295
#define	NEW	296
#define	THEN	297
#define	ELSE	298

#line 1 "./.y"

#include <iostream>
void yyerror(char const* s);
extern int yylex(void);

using namespace std;

#line 9 "./.y"
typedef union {
    int int_literal;
    char char_literal;
    bool boolean_literal;
    string *string_literal;
    string *identifier;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		394
#define	YYFLAG		-32768
#define	YYNTBASE	63

#define YYTRANSLATE(x) ((unsigned)(x) <= 298 ? yytranslate[x] : 111)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    48,     2,     2,     2,    47,     2,     2,    54,
    55,    45,    43,    62,    44,    50,    46,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    60,    61,    37,
    32,    38,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    51,     2,    52,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    58,     2,    59,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    33,    34,    35,    36,
    39,    40,    41,    42,    49,    53,    56,    57
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     8,     9,    11,    13,    16,    18,    20,    27,
    36,    37,    39,    41,    44,    46,    48,    50,    52,    59,
    68,    80,    94,   106,   120,   125,   132,   137,   144,   149,
   156,   166,   174,   184,   192,   202,   210,   220,   228,   229,
   231,   233,   236,   238,   240,   242,   244,   246,   248,   250,
   252,   253,   255,   257,   261,   263,   266,   269,   271,   273,
   275,   277,   279,   281,   285,   286,   288,   290,   293,   296,
   300,   310,   320,   321,   323,   331,   339,   345,   351,   359,
   361,   365,   369,   375,   378,   381,   384,   386,   388,   390,
   392,   396,   398,   400,   402,   404,   406,   409,   412,   417,
   422,   427,   431,   435,   439,   443,   447,   451,   455,   459,
   463,   467,   471,   475,   479,   483,   487,   491,   495,   499,
   503,   507,   509,   513,   515,   519,   523,   527,   533,   537,
   541,   545,   550,   555,   562,   567,   574,   581,   588,   597,
   604,   611,   618,   623,   628,   633,   640,   643,   647,   653,
   660,   666,   673,   677,   682,   684,   688,   689,   691,   697,
   704,   708,   714,   721,   725,   729,   734,   735,   737,   739,
   743,   747,   753,   757,   763,   764,   766,   768,   772,   774,
   778,   782,   786,   788,   790,   792,   794,   796
};

static const short yyrhs[] = {    65,
     0,     9,   110,    58,    65,    59,     0,     0,    66,     0,
    67,     0,    66,    67,     0,    64,     0,    68,     0,    75,
     8,    31,    58,    69,    59,     0,    75,     8,    31,    60,
   110,    58,    69,    59,     0,     0,    70,     0,    71,     0,
    70,    71,     0,    73,     0,    74,     0,    72,     0,    68,
     0,    75,    31,    54,    78,    55,    61,     0,    75,    31,
    54,    78,    55,    58,    81,    59,     0,    75,    31,    54,
    78,    55,    60,     6,    54,   105,    55,    61,     0,    75,
    31,    54,    78,    55,    60,     6,    54,   105,    55,    58,
    81,    59,     0,    75,    31,    54,    78,    55,    60,     7,
    54,   105,    55,    61,     0,    75,    31,    54,    78,    55,
    60,     7,    54,   105,    55,    58,    81,    59,     0,    75,
   109,    31,    61,     0,    75,   109,    31,    32,    92,    61,
     0,    75,   110,    31,    61,     0,    75,   110,    31,    32,
    92,    61,     0,    75,   108,    31,    61,     0,    75,   108,
    31,    32,    92,    61,     0,    75,   109,    31,    54,    78,
    55,    58,    81,    59,     0,    75,   109,    31,    54,    78,
    55,    61,     0,    75,   110,    31,    54,    78,    55,    58,
    81,    59,     0,    75,   110,    31,    54,    78,    55,    61,
     0,    75,    22,    31,    54,    78,    55,    58,    81,    59,
     0,    75,    22,    31,    54,    78,    55,    61,     0,    75,
   108,    31,    54,    78,    55,    58,    81,    59,     0,    75,
   108,    31,    54,    78,    55,    61,     0,     0,    76,     0,
    77,     0,    76,    77,     0,    15,     0,    14,     0,    12,
     0,    13,     0,     3,     0,    10,     0,     5,     0,     4,
     0,     0,    79,     0,    91,     0,    79,    62,    91,     0,
    61,     0,    92,    61,     0,    90,    61,     0,    89,     0,
    88,     0,    87,     0,    84,     0,    86,     0,    83,     0,
    58,    81,    59,     0,     0,    82,     0,    80,     0,    82,
    80,     0,    11,    61,     0,    11,    92,    61,     0,    18,
    54,    85,    61,    85,    61,    85,    55,    80,     0,    18,
    54,    90,    61,    85,    61,    85,    55,    80,     0,     0,
    92,     0,    19,    54,    91,    20,    92,    55,    80,     0,
    16,    80,    21,    54,    92,    55,    61,     0,    21,    54,
    92,    55,    80,     0,    17,    54,    92,    55,    80,     0,
    17,    54,    92,    55,    80,    57,    80,     0,    91,     0,
    91,    32,    92,     0,    90,    62,    31,     0,    90,    62,
    31,    32,    92,     0,   109,    31,     0,   110,    31,     0,
   108,    31,     0,    27,     0,    28,     0,    29,     0,    30,
     0,    54,    92,    55,     0,    93,     0,    94,     0,   100,
     0,    96,     0,    95,     0,    44,    92,     0,    48,    92,
     0,    54,   109,    55,    92,     0,    54,   108,    55,    92,
     0,    54,    92,    55,    92,     0,    92,    45,    92,     0,
    92,    46,    92,     0,    92,    47,    92,     0,    92,    43,
    92,     0,    92,    44,    92,     0,    92,    37,    92,     0,
    92,    38,    92,     0,    92,    39,    92,     0,    92,    40,
    92,     0,    92,    41,   109,     0,    92,    41,   110,     0,
    92,    41,   108,     0,    92,    42,   109,     0,    92,    42,
   110,     0,    92,    42,   108,     0,    92,    35,    92,     0,
    92,    36,    92,     0,    92,    34,    92,     0,    92,    33,
    92,     0,    92,    32,    92,     0,   110,     0,   109,    50,
   110,     0,     7,     0,     7,    50,   110,     0,     6,    50,
   110,     0,    94,    50,   110,     0,    54,    92,    55,    50,
   110,     0,   100,    50,   110,     0,    96,    50,   110,     0,
    95,    50,   110,     0,    93,    54,   105,    55,     0,   110,
    51,   106,    52,     0,   109,    50,   110,    51,   106,    52,
     0,     7,    51,   106,    52,     0,     7,    50,   110,    51,
   106,    52,     0,     6,    50,   110,    51,   106,    52,     0,
    94,    50,   110,    51,   106,    52,     0,    54,    92,    55,
    50,   110,    51,   106,    52,     0,   100,    50,   110,    51,
   106,    52,     0,    96,    50,   110,    51,   106,    52,     0,
    95,    50,   110,    51,   106,    52,     0,   100,    51,   106,
    52,     0,    94,    51,   106,    52,     0,    95,    51,   106,
    52,     0,    54,    92,    55,    51,   106,    52,     0,    53,
   108,     0,    53,   108,    97,     0,    53,   109,    51,    92,
    52,     0,    53,   109,    51,    92,    52,    97,     0,    53,
   110,    51,    92,    52,     0,    53,   110,    51,    92,    52,
    97,     0,    58,    99,    59,     0,    58,    98,    62,    59,
     0,    92,     0,    98,    62,    92,     0,     0,    98,     0,
    53,   109,    54,   105,    55,     0,    53,   109,    54,   105,
    55,   101,     0,    53,   109,   101,     0,    53,   110,    54,
   105,    55,     0,    53,   110,    54,   105,    55,   101,     0,
    53,   110,   101,     0,    58,   102,    59,     0,    58,   103,
    62,    59,     0,     0,   103,     0,   104,     0,   103,    62,
   104,     0,    31,    32,    92,     0,    51,   106,    52,    32,
    92,     0,    31,    32,   101,     0,    51,   106,    52,    32,
   101,     0,     0,   106,     0,   107,     0,   106,    62,   107,
     0,    92,     0,    31,    60,    92,     0,   109,    51,    52,
     0,   110,    51,    52,     0,    23,     0,    24,     0,    25,
     0,    26,     0,    31,     0,   110,    50,    31,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    71,    75,    79,    80,    84,    85,    89,    90,    94,    95,
    99,   100,   104,   105,   109,   110,   111,   112,   116,   117,
   118,   119,   120,   121,   125,   126,   127,   128,   129,   130,
   134,   135,   136,   137,   138,   139,   140,   141,   145,   146,
   150,   151,   155,   156,   157,   158,   159,   160,   161,   162,
   166,   167,   171,   172,   176,   177,   178,   179,   180,   181,
   182,   183,   184,   185,   189,   190,   194,   195,   199,   200,
   204,   205,   209,   210,   214,   218,   222,   226,   227,   231,
   232,   233,   234,   238,   239,   240,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   282,   283,   284,   285,   286,   287,   288,   289,   290,
   291,   295,   299,   300,   301,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   316,   317,   318,   319,
   320,   321,   325,   326,   330,   331,   335,   336,   340,   341,
   342,   343,   344,   345,   349,   350,   354,   355,   359,   360,
   364,   365,   366,   367,   371,   372,   376,   377,   381,   382,
   386,   387,   391,   392,   393,   394,   398,   399
};

static const char * const yytname[] = {   "$","error","$undefined.","ABSTRACT",
"VIRTUAL","OVERRIDE","BASE","THIS","CLASS","NAMESPACE","STATIC","RETURN","PUBLIC",
"INTERNAL","PROTECTED","PRIVATE","DO","IF","FOR","FOREACH","IN","WHILE","VOID",
"INT","CHAR","STRING","BOOL","INT_LITERAL","CHAR_LITERAL","STRING_LITERAL","BOOLEAN_LITERAL",
"ID","'='","OR","AND","EQUALITY","INEQUALITY","'<'","'>'","LESS_EQUAL","GREATER_EQUAL",
"IS","AS","'+'","'-'","'*'","'/'","'%'","'!'","UNMINUS","'.'","'['","']'","NEW",
"'('","')'","THEN","ELSE","'{'","'}'","':'","';'","','","program","namespace_declaration",
"namespace_member_declaration_list_em","namespace_member_declaration_list","namespace_member_declaration",
"class_declaration","class_member_declaration_list_em","class_member_declaration_list",
"class_member_declaration","constructor_declaration","field_declaration","method_declaration",
"modifier_list_em","modifier_list","modifier","param_list_em","param_list","stmt",
"stmt_list_em","stmt_list","return_stmt","for_stmt","for_expr","foreach_stmt",
"do_stmt","while_stmt","if_stmt","var_declarator_list","var_declarator","expr",
"member_access","invocation_expression","element_access","array_creation_expr",
"array_initializer","expr_list","expr_list_em","obj_creation_expr","obj_initializer",
"member_initializer_list_em","member_initializer_list","member_initializer",
"argm_list_em","argm_list","argm","array_type","type","type_name",""
};
#endif

static const short yyr1[] = {     0,
    63,    64,    65,    65,    66,    66,    67,    67,    68,    68,
    69,    69,    70,    70,    71,    71,    71,    71,    72,    72,
    72,    72,    72,    72,    73,    73,    73,    73,    73,    73,
    74,    74,    74,    74,    74,    74,    74,    74,    75,    75,
    76,    76,    77,    77,    77,    77,    77,    77,    77,    77,
    78,    78,    79,    79,    80,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    81,    81,    82,    82,    83,    83,
    84,    84,    85,    85,    86,    87,    88,    89,    89,    90,
    90,    90,    90,    91,    91,    91,    92,    92,    92,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
    92,    92,    92,    92,    92,    92,    92,    92,    92,    92,
    92,    93,    93,    93,    93,    93,    93,    93,    93,    93,
    93,    94,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    96,    96,    96,    96,
    96,    96,    97,    97,    98,    98,    99,    99,   100,   100,
   100,   100,   100,   100,   101,   101,   102,   102,   103,   103,
   104,   104,   104,   104,   105,   105,   106,   106,   107,   107,
   108,   108,   109,   109,   109,   109,   110,   110
};

static const short yyr2[] = {     0,
     1,     5,     0,     1,     1,     2,     1,     1,     6,     8,
     0,     1,     1,     2,     1,     1,     1,     1,     6,     8,
    11,    13,    11,    13,     4,     6,     4,     6,     4,     6,
     9,     7,     9,     7,     9,     7,     9,     7,     0,     1,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     0,     1,     1,     3,     1,     2,     2,     1,     1,     1,
     1,     1,     1,     3,     0,     1,     1,     2,     2,     3,
     9,     9,     0,     1,     7,     7,     5,     5,     7,     1,
     3,     3,     5,     2,     2,     2,     1,     1,     1,     1,
     3,     1,     1,     1,     1,     1,     2,     2,     4,     4,
     4,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     1,     3,     1,     3,     3,     3,     5,     3,     3,
     3,     4,     4,     6,     4,     6,     6,     6,     8,     6,
     6,     6,     4,     4,     4,     6,     2,     3,     5,     6,
     5,     6,     3,     4,     1,     3,     0,     1,     5,     6,
     3,     5,     6,     3,     3,     4,     0,     1,     1,     3,
     3,     5,     3,     5,     0,     1,     1,     3,     1,     3,
     3,     3,     1,     1,     1,     1,     1,     3
};

static const short yydefact[] = {     3,
    47,    50,    49,     0,    48,    45,    46,    44,    43,     7,
     1,     4,     5,     8,     0,    40,    41,   187,     0,     6,
     0,    42,     0,     3,     0,   188,     0,    39,     0,     2,
    18,     0,    39,    13,    17,    15,    16,     0,     0,     9,
    14,     0,   183,   184,   185,   186,   187,     0,     0,     0,
    39,     0,    51,     0,     0,     0,     0,     0,     0,    51,
     0,    52,    53,     0,     0,     0,     0,    51,    29,     0,
    51,    25,   181,     0,    51,    27,   182,    10,     0,     0,
     0,    86,    84,    85,     0,   124,    87,    88,    89,    90,
     0,     0,     0,     0,     0,    92,    93,    96,    95,    94,
     0,   122,     0,     0,     0,     0,     0,     0,    65,     0,
    19,    54,     0,     0,     0,    97,    98,   147,     0,     0,
     0,     0,     0,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    30,   175,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    26,     0,    28,     0,    65,    36,     0,     0,
     0,     0,     0,     0,    65,    55,    67,     0,    66,    63,
    61,    62,    60,    59,    58,     0,    80,     0,     0,   122,
     0,     0,   126,   125,   187,   179,     0,   177,   157,   148,
     0,   175,   167,   161,     0,   175,   164,    91,     0,     0,
     0,   121,   120,   119,   117,   118,   107,   108,   109,   110,
   113,   111,   112,   116,   114,   115,   105,   106,   102,   103,
   104,     0,   176,   127,     0,   131,     0,   130,   129,     0,
   123,     0,    65,    38,    65,    32,    65,    34,     0,    69,
     0,     0,     0,    73,     0,     0,     0,    20,    68,    57,
     0,     0,    56,   175,   175,     0,     0,     0,   135,     0,
   155,   158,     0,     0,     0,     0,     0,     0,   168,   169,
     0,     0,     0,     0,   101,   100,    99,   132,     0,   144,
     0,   145,     0,     0,   143,     0,   133,     0,     0,     0,
    35,    70,     0,     0,     0,     0,    74,     0,     0,    64,
    82,    81,     0,     0,     0,     0,   180,   178,     0,   153,
   149,   159,     0,     0,   165,     0,   151,   162,   128,     0,
     0,     0,     0,     0,     0,    37,    31,    33,     0,     0,
    73,    73,     0,     0,     0,     0,     0,   137,   136,   154,
   156,   150,   160,   171,   173,     0,   166,   170,   152,   163,
     0,   146,   138,   142,   141,   140,   134,     0,    78,     0,
     0,     0,    77,    83,    65,    21,    65,    23,     0,     0,
     0,     0,    73,    73,     0,     0,     0,   172,   174,   139,
    76,    79,     0,     0,    75,    22,    24,     0,     0,    71,
    72,     0,     0,     0
};

static const short yydefgoto[] = {   392,
    10,    11,    12,    13,    14,    32,    33,    34,    35,    36,
    37,    15,    16,    17,    61,    62,   167,   168,   169,   170,
   171,   295,   172,   173,   174,   175,   176,   177,   186,    96,
    97,    98,    99,   190,   262,   263,   100,   194,   268,   269,
   270,   222,   223,   188,    64,   101,   102
};

static const short yypact[] = {   292,
-32768,-32768,-32768,   -17,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   292,-32768,-32768,    11,   330,-32768,-32768,    54,-32768,
    -1,-32768,    30,   292,   217,-32768,   -32,   103,   -17,-32768,
-32768,    19,   122,-32768,-32768,-32768,-32768,   248,    64,-32768,
-32768,    97,-32768,-32768,-32768,-32768,    65,   111,    15,   -30,
   103,   115,   324,    -6,    20,    95,    31,    99,   126,   324,
   143,   127,-32768,   179,    45,    44,   635,   324,-32768,   635,
   324,-32768,-32768,   635,   324,-32768,-32768,-32768,   162,   224,
   324,-32768,-32768,-32768,   172,   194,-32768,-32768,-32768,-32768,
   635,   635,   324,   635,   669,   182,   267,   272,   176,   274,
   192,   277,   200,   699,   213,   729,   221,    21,   370,   331,
-32768,-32768,   -17,   -17,   646,-32768,-32768,   225,   174,   169,
   819,   232,   184,   309,   635,   635,   635,   635,   635,   635,
   635,   635,   635,   324,   324,   635,   635,   635,   635,   635,
-32768,   646,   -17,   646,   -17,   646,   -17,   -17,   646,   -17,
   646,    62,-32768,   146,-32768,   230,   370,-32768,   413,   370,
   239,   245,   249,   255,   370,-32768,-32768,   273,   370,-32768,
-32768,-32768,-32768,-32768,-32768,   308,   314,   759,    52,   107,
   287,   297,   332,   366,   302,   981,   -47,-32768,   635,-32768,
   528,   646,    60,-32768,   560,   646,-32768,   571,   635,   635,
   603,   981,   995,   682,   365,   365,   220,   220,   220,   220,
-32768,   306,   371,-32768,   306,   371,   268,   268,-32768,-32768,
-32768,   311,   310,   375,    10,   382,    18,   395,   397,    35,
   412,    88,   370,-32768,   370,-32768,   370,-32768,   319,-32768,
   789,   359,   635,   635,   324,   635,   333,-32768,-32768,-32768,
   384,   635,-32768,   646,   646,   646,   646,   635,-32768,   646,
   981,   328,   354,   939,   372,   403,   646,   390,   367,-32768,
   960,   415,   -17,   646,-32768,-32768,-32768,-32768,   646,-32768,
   646,-32768,   646,   646,-32768,   646,-32768,   399,   409,   410,
-32768,-32768,   417,   843,   411,   313,   981,   455,   867,-32768,
   441,   981,   430,   432,    93,   102,   981,-32768,   453,-32768,
   225,   431,   492,   118,-32768,   -28,   225,   431,   414,   120,
   125,   132,   134,   138,   140,-32768,-32768,-32768,   635,   370,
   635,   635,   635,   370,   635,   231,   250,-32768,-32768,-32768,
   981,-32768,-32768,   981,-32768,   459,-32768,-32768,-32768,-32768,
   646,-32768,-32768,-32768,-32768,-32768,-32768,   891,   435,   439,
   442,   915,-32768,   981,   370,-32768,   370,-32768,   492,   141,
   443,   370,   635,   635,   370,   446,   449,   981,-32768,-32768,
-32768,-32768,   447,   456,-32768,-32768,-32768,   370,   370,-32768,
-32768,   513,   514,-32768
};

static const short yypgoto[] = {-32768,
-32768,   500,-32768,   515,     0,   474,-32768,   493,-32768,-32768,
-32768,    14,-32768,   512,    92,-32768,  -151,  -149,-32768,-32768,
-32768,  -320,-32768,-32768,-32768,-32768,   285,   -31,   121,-32768,
-32768,-32768,-32768,  -143,-32768,-32768,-32768,  -107,-32768,-32768,
   214,  -186,  -108,   271,   -34,   -36,    -4
};


#define	YYLAST		1042


static const short yytable[] = {    19,
    57,    49,   266,    48,   259,   265,   187,   239,   242,   272,
   360,   361,   197,    18,   260,   247,    65,   249,    21,    23,
    58,    63,   267,    65,    39,    67,    30,    31,    63,    25,
   347,    65,    31,    50,    65,   225,    63,   227,    65,    63,
   230,    38,   232,    63,    65,    55,    38,    68,    66,   112,
    31,    70,   383,   384,    69,    66,   119,   123,   118,   122,
    26,   280,    74,    66,    38,    56,    66,   303,   304,   282,
    66,   260,   179,    71,    84,    83,    66,    40,   157,   260,
    72,   158,    83,   288,    75,   289,   285,   290,   120,   124,
   266,    76,   232,    23,    58,    56,   260,   212,   215,   211,
   214,   150,    56,    23,   180,     1,     2,     3,   183,   184,
   267,    24,     5,    23,     6,     7,     8,     9,    53,   233,
   179,    51,   234,   179,     1,     2,     3,    52,   179,   213,
   216,     5,   179,     6,     7,     8,     9,    84,   224,   287,
   226,    54,   228,   229,   338,   231,    73,   305,   306,   260,
    77,    79,   180,   339,   260,   180,    23,   201,   314,   103,
   180,   -11,   105,   260,   180,   320,   107,   342,    60,   346,
   321,   352,   322,   349,   323,   324,   353,   325,   359,   260,
   -12,   260,   363,   354,    78,   355,   260,    95,    81,   356,
   104,   357,   380,   260,   106,   260,   179,    80,   179,   260,
   179,   260,   260,   235,   343,   345,   236,   179,    65,    82,
   350,   116,   117,   298,   121,   376,   108,   377,    23,   195,
   382,   113,   196,   385,   191,   147,   193,   192,   180,   178,
   180,   193,   180,   150,    56,   142,   390,   391,   200,   180,
    66,   150,   370,   114,   115,   202,   203,   204,   205,   206,
   207,   208,   209,   210,   152,    21,   217,   218,   219,   220,
   221,   379,   136,   137,   138,   139,   140,   154,   319,    42,
    43,    44,    45,    46,    28,   156,    29,   178,    47,   241,
   178,   109,   189,   110,   111,   178,   199,   237,   365,   178,
   238,   366,   243,   179,     1,     2,     3,   179,   244,   -39,
     4,     5,   245,     6,     7,     8,     9,   367,   246,   261,
   368,   264,   138,   139,   140,   271,   143,   144,   275,   276,
   277,   145,   146,   148,   149,   180,    23,   151,   179,   180,
   179,   248,     1,     2,     3,   179,   181,   182,   179,     5,
   254,     6,     7,     8,     9,   252,    43,    44,    45,    46,
   255,   179,   179,   178,    18,   178,    56,   178,    23,   201,
   180,   258,   180,   294,   297,   278,   299,   180,   250,   251,
   180,   260,   302,   332,   251,    85,    86,   291,   307,   293,
   159,    23,   256,   180,   180,   160,   161,   162,   163,   309,
   164,   300,    43,    44,    45,    46,    87,    88,    89,    90,
    18,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   310,    91,   301,    23,   257,    92,    85,    86,
    23,    58,    93,    94,    23,   279,   312,   165,   316,   341,
   166,    23,   281,   344,   313,    43,    44,    45,    46,    87,
    88,    89,    90,    18,    23,   283,    23,   284,   315,   358,
   178,   297,   297,   362,   178,   364,    91,   326,    85,    86,
    92,    23,   286,    23,   351,    93,    94,   327,   328,   318,
   329,   331,   335,   240,   333,    43,    44,    45,    46,    87,
    88,    89,    90,    18,   336,   178,   337,   178,   193,   378,
   369,   372,   178,   297,   297,   178,    91,    85,    86,   373,
    92,   388,   374,   381,   386,    93,    94,   387,   178,   178,
   389,   340,   393,   394,    43,    44,    45,    46,    87,    88,
    89,    90,    18,    27,    59,    41,    20,    22,   296,   348,
   308,     0,     0,    85,    86,    91,     0,     0,     0,    92,
     0,     0,     0,     0,    93,    94,     0,     0,     0,   193,
    43,    44,    45,    46,    87,    88,    89,    90,    18,     0,
     0,     0,     0,     0,     0,    85,    86,     0,     0,     0,
     0,    91,     0,     0,     0,    92,    85,    86,     0,    73,
    93,    94,    43,    44,    45,    46,    87,    88,    89,    90,
    18,     0,     0,    43,    44,    45,    46,    87,    88,    89,
    90,    18,     0,    91,     0,     0,     0,    92,    85,    86,
     0,    77,    93,    94,     0,     0,     0,     0,    92,     0,
   273,   274,     0,    93,    94,    43,    44,    45,    46,    87,
    88,    89,    90,   185,     0,     0,     0,     0,     0,     0,
    85,    86,     0,     0,     0,     0,    91,     0,     0,     0,
    92,    85,    86,     0,    77,    93,    94,    43,    44,    45,
    46,    87,    88,    89,    90,    18,     0,     0,    43,    44,
    45,    46,    87,    88,    89,    90,   185,     0,    91,     0,
     0,     0,    92,     0,     0,     0,     0,    93,    94,    91,
     0,     0,     0,    92,     0,     0,     0,     0,    93,    94,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   153,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   155,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   253,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   292,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
     0,     0,     0,   198,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     0,     0,     0,     0,     0,     0,     0,   330,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,     0,     0,     0,     0,     0,     0,
     0,   334,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,     0,     0,
     0,     0,     0,     0,     0,   371,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,     0,     0,     0,     0,     0,     0,     0,   375,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
   311,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,     0,     0,     0,
     0,   317,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140
};

static const short yycheck[] = {     4,
    31,    38,    31,    38,    52,   192,   115,   157,   160,   196,
   331,   332,   120,    31,    62,   165,    53,   169,     8,    50,
    51,    53,    51,    60,    29,    32,    59,    28,    60,    31,
    59,    68,    33,    38,    71,   144,    68,   146,    75,    71,
   149,    28,   151,    75,    81,    31,    33,    54,    53,    81,
    51,    32,   373,   374,    61,    60,    93,    94,    93,    94,
    31,    52,    32,    68,    51,    51,    71,   254,   255,    52,
    75,    62,   109,    54,    31,    31,    81,    59,    58,    62,
    61,    61,    31,   233,    54,   235,    52,   237,    93,    94,
    31,    61,   201,    50,    51,    51,    62,   134,   135,   134,
   135,    50,    51,    50,   109,     3,     4,     5,   113,   114,
    51,    58,    10,    50,    12,    13,    14,    15,    54,    58,
   157,    58,    61,   160,     3,     4,     5,    31,   165,   134,
   135,    10,   169,    12,    13,    14,    15,    31,   143,    52,
   145,    31,   147,   148,    52,   150,    52,   256,   257,    62,
    52,    60,   157,    52,    62,   160,    50,    51,   267,    68,
   165,    59,    71,    62,   169,   274,    75,   311,    54,    52,
   279,    52,   281,   317,   283,   284,    52,   286,   330,    62,
    59,    62,   334,    52,    59,    52,    62,    67,    62,    52,
    70,    52,    52,    62,    74,    62,   233,    55,   235,    62,
   237,    62,    62,    58,   312,   313,    61,   244,   245,    31,
   318,    91,    92,   245,    94,   365,    55,   367,    50,    51,
   372,    50,    54,   375,    51,    50,    58,    54,   233,   109,
   235,    58,   237,    50,    51,    54,   388,   389,    55,   244,
   245,    50,   351,    50,    51,   125,   126,   127,   128,   129,
   130,   131,   132,   133,    55,     8,   136,   137,   138,   139,
   140,   369,    43,    44,    45,    46,    47,    55,   273,    22,
    23,    24,    25,    26,    58,    55,    60,   157,    31,   159,
   160,    58,    58,    60,    61,   165,    55,    58,    58,   169,
    61,    61,    54,   330,     3,     4,     5,   334,    54,     8,
     9,    10,    54,    12,    13,    14,    15,    58,    54,   189,
    61,   191,    45,    46,    47,   195,    50,    51,   198,   199,
   200,    50,    51,    50,    51,   330,    50,    51,   365,   334,
   367,    59,     3,     4,     5,   372,     6,     7,   375,    10,
    54,    12,    13,    14,    15,    32,    23,    24,    25,    26,
    54,   388,   389,   233,    31,   235,    51,   237,    50,    51,
   365,    60,   367,   243,   244,    55,   246,   372,    61,    62,
   375,    62,   252,    61,    62,     6,     7,    59,   258,    21,
    11,    50,    51,   388,   389,    16,    17,    18,    19,    62,
    21,    59,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    59,    44,    31,    50,    51,    48,     6,     7,
    50,    51,    53,    54,    50,    51,    55,    58,    62,   309,
    61,    50,    51,   313,    32,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    50,    51,    50,    51,    59,   329,
   330,   331,   332,   333,   334,   335,    44,    59,     6,     7,
    48,    50,    51,    50,    51,    53,    54,    59,    59,    55,
    54,    61,    32,    61,    20,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    55,   365,    55,   367,    58,   369,
    32,    57,   372,   373,   374,   375,    44,     6,     7,    61,
    48,    55,    61,    61,    59,    53,    54,    59,   388,   389,
    55,    59,     0,     0,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    24,    51,    33,    12,    16,   244,   316,
   260,    -1,    -1,     6,     7,    44,    -1,    -1,    -1,    48,
    -1,    -1,    -1,    -1,    53,    54,    -1,    -1,    -1,    58,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
    -1,    -1,    -1,    -1,    -1,     6,     7,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    -1,    48,     6,     7,    -1,    52,
    53,    54,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    -1,    44,    -1,    -1,    -1,    48,     6,     7,
    -1,    52,    53,    54,    -1,    -1,    -1,    -1,    48,    -1,
    50,    51,    -1,    53,    54,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
     6,     7,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    48,     6,     7,    -1,    52,    53,    54,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    -1,    -1,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    -1,    44,    -1,
    -1,    -1,    48,    -1,    -1,    -1,    -1,    53,    54,    44,
    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    53,    54,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    61,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    55,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    55,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    55,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    52,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
    -1,    52,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 404 "./.y"


void yyerror(char const* s)
{
    cout << s << endl;
}